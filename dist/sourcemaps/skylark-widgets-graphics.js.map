{"version":3,"sources":["skylark-widgets-graphics.js"],"names":["define","skylark","attach","eventer","Widget","graphics","Graph","inherit","_construct","parent","name","color","prototype","call","this","_elm","style","overflow","scaleMargin","buttonRadius","max","min","grid","document","createElement","position","marginLeft","appendChild","graph","addGraph","scale","createScale","size","i","removeChild","step","pointerEvents","Editor","theme","textColor","text","createTextNode","push","_updateScale","length","data","canvas","GaphLine","setOnChange","onChange","getGraph","onchange","setRange","j","values","_updateGraph","setValue","self","buttons","button","borderRadius","backgroundColor","cursor","marginTop","width","height","index","onmousedown","event","on","window","delta","movementY","y","stopPropagation","pop","update","Math","ceil","getValue","undefined","x","context","getContext","clearRect","strokeStyle","lineWidth","moveTo","beginPath","lineTo","left","top","stroke","_updateGrid","rect","_updateSize","main"],"mappings":"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","file":"../skylark-widgets-graphics.js","sourcesContent":["define('skylark-widgets-graphics/graphics',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\tvar graphics = {};\r\n\r\n\treturn skylark.attach(\"widgets.graphics\",graphics);\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-graphics/Graph',[\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./graphics\"\r\n],function(eventer, Widget,graphics){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Graph element is used to draw interactive line graphs.\r\n\t *\r\n\t * It is meant to be used as input in forms to controls values in arrays.\r\n\t *\r\n\t * Multiple graph lines can be displayed, each graph line has a name that can be used to access its properties.\r\n\t * \r\n\t * @class Graph\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t * @param {String} name Name of the default graph.\r\n\t * @param {String} color CSS hex color code of the default graph.\r\n\t */\r\n\tvar Graph = Widget.inherit({\r\n\r\n\t\t_construct : function (parent, name, color) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Scale margin in pixels.\r\n\t\t\t *\r\n\t\t\t * @property scaleMargin\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.scaleMargin = 22;\r\n\r\n\t\t\t/**\r\n\t\t\t * Value button size.\r\n\t\t\t *\r\n\t\t\t * @property buttonRadius\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.buttonRadius = 10;\r\n\r\n\t\t\t/**\r\n\t\t\t * Maximum value displayed vertically.\r\n\t\t\t *\r\n\t\t\t * @property max\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.max = 1.0;\r\n\r\n\t\t\t/**\r\n\t\t\t * Minimum value displayed vertically.\r\n\t\t\t *\r\n\t\t\t * @property min\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.min = 0.0;\r\n\r\n\t\t\t/**\r\n\t\t\t * Grid canvas element.\r\n\t\t\t *\r\n\t\t\t * @property grid\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.grid = document.createElement(\"canvas\");\r\n\t\t\tthis.grid.style.position = \"absolute\";\r\n\t\t\tthis.grid.style.marginLeft = this.scaleMargin + \"px\";\r\n\t\t\tthis._elm.appendChild(this.grid);\r\n\r\n\t\t\t/**\r\n\t\t\t * The graph lines stored in this graph.\r\n\t\t\t *\r\n\t\t\t * @property graph\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.graph = [];\r\n\t\t\tthis.addGraph(name, color);\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Scale DOM elements.\r\n\t\t\t *\r\n\t\t\t * @property scale\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.scale = [];\r\n\t\t\tthis.createScale(3);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Create numeric scale for this graph.\r\n\t\t *\r\n\t\t * @method createScale\r\n\t\t * @param {Number} size Number of values in the scale.\r\n\t\t */\r\n\t\tcreateScale : function(size) {\r\n\t\t\tfor(var i = 0; i < this.scale; i++)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.removeChild(this.scale[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar step = (this.max - this.min) / (size - 1);\r\n\r\n\t\t\tfor(var i = 0; i < size; i++)\r\n\t\t\t{\r\n\t\t\t\tvar scale = document.createElement(\"div\");\r\n\t\t\t\tscale.style.position = \"absolute\";\r\n\t\t\t\tscale.style.pointerEvents = \"none\";\r\n\t\t\t\tscale.style.color = Editor.theme.textColor;\r\n\r\n\t\t\t\tvar text = document.createTextNode(this.max - (step * i));\r\n\t\t\t\tscale.text = text;\r\n\t\t\t\tscale.appendChild(text);\r\n\r\n\t\t\t\tthis.scale.push(scale);\r\n\t\t\t\tthis._elm.appendChild(scale);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update values of the scale.\r\n\t\t *\r\n\t\t * @method updateScale\r\n\t\t */\r\n\t\t_updateScale : function() {\r\n\t\t\tvar step = (this.max - this.min) / (this.scale.length - 1);\r\n\r\n\t\t\tfor(var i = 0; i < this.scale.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.scale[(this.scale.length - 1) - i].text.data = this.min + (step * i);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new graph line.\r\n\t\t *\r\n\t\t * @method addGraph\r\n\t\t * @param {String} name Name of the graph.\r\n\t\t * @param {Color} color Color of the graph.\r\n\t\t */\r\n\t\taddGraph : function(name, color) {\r\n\t\t\tvar canvas = document.createElement(\"canvas\");\r\n\t\t\tcanvas.style.position = \"absolute\";\r\n\t\t\tcanvas.style.marginLeft = this.scaleMargin + \"px\";\r\n\t\t\tthis._elm.appendChild(canvas);\r\n\r\n\t\t\tthis.graph.push(new Graph.GaphLine(canvas, name, color));\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Attach onchange callback to a graph by its name.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t * @param {String} name Graph name.\r\n\t\t */\r\n\t\tsetOnChange : function(onChange, name) \t{\r\n\t\t\tvar graph = this.getGraph(name);\r\n\t\t\tgraph.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value range of the graph.\r\n\t\t *\r\n\t\t * @method setRange.\r\n\t\t * @param {Number} min\r\n\t\t * @param {Number} max\r\n\t\t */\r\n\t\tsetRange : function(min, max) {\r\n\t\t\tthis.min = min;\r\n\t\t\tthis.max = max;\r\n\r\n\t\t\t//Limit graphs values\r\n\t\t\tfor(var i in this.graph) {\r\n\t\t\t\tvar graph = this.graph[i];\r\n\r\n\t\t\t\tfor(var j = 0; j < graph.values.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(graph.values[j] < min)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgraph.values[j] = min;\r\n\r\n\t\t\t\t\t\tif(graph.onchange !== null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgraph.onchange(graph.values);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(graph.values[j] > max)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgraph.values[j] = max;\r\n\r\n\t\t\t\t\t\tif(graph.onchange !== null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgraph.onchange(graph.values);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateScale();\r\n\r\n\t\t\t//Update grid to fit new scale\r\n\t\t\tfor(var i = 0; i < this.graph.length; i++){\r\n\t\t\t\tthis._updateGraph(this.graph[i]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set values array to a graph using its name.\r\n\t\t *\r\n\t\t * @method setValue\r\n\t\t * @param {Array} values Array of numeric values.\r\n\t\t * @param {String} name Name of the graph line.\r\n\t\t */\r\n\t\tsetValue : function(values, name) {\t\r\n\t\t\tvar self = this;\r\n\t\t\tvar graph = this.getGraph(name);\r\n\r\n\t\t\t//Set values\r\n\t\t\tgraph.values = values;\r\n\r\n\t\t\t//Add buttons if necessary\r\n\t\t\twhile(graph.buttons.length < graph.values.length){\r\n\t\t\t\tvar button = document.createElement(\"div\");\r\n\t\t\t\tbutton.style.borderRadius = \"5px\";\r\n\t\t\t\tbutton.style.backgroundColor = graph.color;\r\n\t\t\t\tbutton.style.cursor = \"pointer\";\r\n\t\t\t\tbutton.style.position = \"absolute\";\r\n\t\t\t\tbutton.style.marginTop = \"-\" + (this.buttonRadius / 2) + \"px\";\r\n\t\t\t\tbutton.style.marginLeft = (this.scaleMargin - (this.buttonRadius / 2)) + \"px\";\r\n\t\t\t\tbutton.style.width = this.buttonRadius + \"px\";\r\n\t\t\t\tbutton.style.height = this.buttonRadius + \"px\";\r\n\t\t\t\tbutton.index = graph.buttons.length;\r\n\t\t\t\tbutton.graph = graph;\r\n\r\n\t\t\t\tbutton.onmousedown = function(event) {\r\n\t\t\t\t\tvar index = this.index;\r\n\t\t\t\t\tvar graph = this.graph;\r\n\t\t\t\t\t//var manager = new EventManager();\r\n\r\n\t\t\t\t\t//manager.add(window, \"mousemove\", function(event)\r\n\t\t\t\t\teventer.on(window, \"mousemove\", function(event) {\r\n\t\t\t\t\t\tvar delta = event.movementY;\r\n\r\n\t\t\t\t\t\tgraph.values[index] -= (delta * ((self.max - self.min) / self.size.y));\r\n\r\n\t\t\t\t\t\tif(graph.values[index] > self.max)\t{\r\n\t\t\t\t\t\t\tgraph.values[index] = self.max;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(graph.values[index] < self.min)\t{\r\n\t\t\t\t\t\t\tgraph.values[index] = self.min;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(graph.onchange !== null)\t{\r\n\t\t\t\t\t\t\tgraph.onchange(graph.values);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tself._updateGraph(graph);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t//manager.add(window, \"mouseup\", function(event)\r\n\t\t\t\t\t//{\t\r\n\t\t\t\t\t//\tmanager.destroy();\r\n\t\t\t\t\t//});\r\n\t\t\t\t\t//manager.create();\r\n\r\n\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis._elm.appendChild(button);\r\n\t\t\t\tgraph.buttons.push(button);\r\n\t\t\t}\r\n\r\n\t\t\t//Remove buttons if necessary\r\n\t\t\twhile(graph.buttons.length > graph.values.length){\r\n\t\t\t\tthis._elm.removeChild(graph.buttons.pop());\r\n\t\t\t}\r\n\r\n\t\t\t//Check if new values are in range\r\n\t\t\tvar update = false;\r\n\t\t\tfor(var i = 0; i < values.length; i++)\t{\r\n\t\t\t\tif(values[i] < this.min){\r\n\t\t\t\t\tthis.min = Math.ceil(values[i]);\r\n\t\t\t\t\tupdate = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse if(values[i] > this.max){\r\n\t\t\t\t\tthis.max = Math.ceil(values[i] + 1.0);\r\n\t\t\t\t\tupdate = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//If some value not in range update range\r\n\t\t\tif(update)\t{\r\n\t\t\t\tthis.setRange(this.min, this.max);\r\n\t\t\t}\r\n\r\n\t\t\t//Update graph\r\n\t\t\tthis._updateGraph(graph);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return value array of a graph by its name.\r\n\t\t *\r\n\t\t * @method getValue\r\n\t\t * @param {String} name Graph name.\r\n\t\t */\r\n\t\tgetValue : function(name) {\r\n\t\t\tvar graph = this.getGraph(name);\r\n\r\n\t\t\tif(graph !== null)\r\n\t\t\t{\r\n\t\t\t\treturn graph.values;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get graph object by name.\r\n\t\t *\r\n\t\t * @method getGraph\r\n\t\t * @param {String} name Graph name.\r\n\t\t */\r\n\t\tgetGraph : function(name) {\r\n\t\t\tif(name !== undefined) \t{\r\n\t\t\t\tfor(var i = 0; i < this.graph.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.graph[i].name === name)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn this.graph[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.graph.length > 0)\r\n\t\t\t{\r\n\t\t\t\treturn this.graph[0];\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update graph canvas and buttons.\r\n\t\t *\r\n\t\t * @method updateGraph\r\n\t\t * @param {Object} graph Graph object.\r\n\t\t */\r\n\t\t_updateGraph : function(graph)\r\n\t\t{\r\n\t\t\tvar width = this.size.x - this.scaleMargin;\r\n\r\n\t\t\t//Get canvas context\r\n\t\t\tvar context = graph.canvas.getContext(\"2d\");\r\n\t\t\tcontext.clearRect(0, 0, width, this.size.y);\r\n\t\t\tcontext.strokeStyle = graph.color;\r\n\t\t\tcontext.lineWidth = \"2\";\r\n\r\n\t\t\t//Draw graph and set button positions\r\n\t\t\tvar step = width / (graph.values.length - 1);\r\n\t\t\tvar delta = this.max - this.min;\r\n\r\n\t\t\tcontext.moveTo(0, graph.values[0] * this.size.y);\r\n\t\t\tcontext.beginPath();\r\n\r\n\t\t\tfor(var i = 0; i < graph.values.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar x = i * step;\r\n\t\t\t\tvar y = (1 - ((graph.values[i] - this.min) / delta)) * this.size.y;\r\n\r\n\t\t\t\tcontext.lineTo(x, y);\r\n\r\n\t\t\t\tvar button = graph.buttons[i];\r\n\t\t\t\tbutton.style.left = x + \"px\";\r\n\t\t\t\tbutton.style.top = y + \"px\";\r\n\t\t\t}\r\n\r\n\t\t\tcontext.stroke();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Draw background grid canvas.\r\n\t\t *\r\n\t\t * @method updateGrid\r\n\t\t */\r\n\t\t_updateGrid : function() {\r\n\t\t\tvar width = this.size.x - this.scaleMargin;\r\n\r\n\t\t\tvar context = this.grid.getContext(\"2d\");\r\n\t\t\tcontext.clearRect(0, 0, width, this.size.y);\r\n\t\t\tcontext.strokeStyle = \"#222222\";\r\n\t\t\tcontext.lineWidth = \"1\";\r\n\r\n\t\t\t//Border\r\n\t\t\tcontext.beginPath();\r\n\t\t\tcontext.rect(0, 0, width, this.size.y);\r\n\t\t\tcontext.stroke();\r\n\t\t\tcontext.moveTo(0, 0);\r\n\r\n\t\t\tvar step = width / 10;\r\n\t\t\tif(step <= 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//Vertical lines\t\r\n\t\t\tfor(var i = 0; i < width; i += step) {\r\n\t\t\t\tcontext.beginPath();\r\n\t\t\t\tcontext.moveTo(i, 0);\r\n\t\t\t\tcontext.lineTo(i, this.size.y);\r\n\t\t\t\tcontext.stroke();\r\n\t\t\t}\r\n\r\n\t\t\t//Horizontal lines\r\n\t\t\tfor(var i = 0; i < this.size.y; i += step)\t{\r\n\t\t\t\tcontext.beginPath();\r\n\t\t\t\tcontext.moveTo(0, i);\r\n\t\t\t\tcontext.lineTo(width, i);\r\n\t\t\t\tcontext.stroke();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_updateSize : function() {\r\n\t\t\tWidget.prototype._updateSize.call(this);\r\n\r\n\t\t\tvar width = this.size.x - this.scaleMargin;\r\n\r\n\t\t\t//Grid\r\n\t\t\tthis.grid.width = width;\r\n\t\t\tthis.grid.height = this.size.y;\r\n\t\t\tthis.grid.style.width = width + \"px\";\r\n\t\t\tthis.grid.style.height = this.size.y + \"px\";\r\n\t\t\tthis._updateGrid();\r\n\r\n\t\t\t//Graph\r\n\t\t\tfor(var i = 0; i < this.graph.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar graph = this.graph[i];\r\n\t\t\t\tgraph.canvas.width = width;\r\n\t\t\t\tgraph.canvas.height = this.size.y;\r\n\t\t\t\tgraph.canvas.style.width = width + \"px\";\r\n\t\t\t\tgraph.canvas.style.height = this.size.y + \"px\";\r\n\t\t\t\tthis._updateGraph(graph);\r\n\t\t\t}\r\n\r\n\t\t\t//Scale\r\n\t\t\tvar step = (this.size.y - 14) / (this.scale.length - 1);\r\n\t\t\tfor(var i = 0; i < this.scale.length; i++) {\r\n\t\t\t\tthis.scale[i].style.top = (i * step) + \"px\";\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tGraph.GaphLine = function(canvas, name, color)\r\n\t{\r\n\t\tif(canvas === undefined)\r\n\t\t{\r\n\t\t\tcanvas = document.createElement(\"canvas\");\r\n\t\t\tcanvas.style.position = \"absolute\";\r\n\t\t}\r\n\r\n\t\tthis.canvas = canvas;\r\n\t\tthis.name = (name !== undefined) ? name : \"default\";\r\n\t\tthis.color = (color !== undefined) ? color : \"#FFFFFF\";\r\n\t\tthis.values = [];\r\n\t\tthis.buttons = [];\r\n\t\tthis.onchange = null;\r\n\t};\r\n\r\n\r\n\treturn graphics.Graph = Graph;\r\n});\ndefine('skylark-widgets-graphics/main',[\r\n\t\"./graphics\",\r\n\t\"./Graph\"\r\n],function(graphics){\r\n\treturn graphics;\r\n});\ndefine('skylark-widgets-graphics', ['skylark-widgets-graphics/main'], function (main) { return main; });\n\n"]}