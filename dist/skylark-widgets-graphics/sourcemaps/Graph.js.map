{"version":3,"sources":["Graph.js"],"names":["define","eventer","Widget","graphics","inherit","_construct","parent","name","color","prototype","call","this","_elm","style","overflow","scaleMargin","buttonRadius","max","min","grid","document","createElement","position","marginLeft","appendChild","graph","addGraph","scale","createScale","size","i","removeChild","step","pointerEvents","Editor","theme","textColor","text","createTextNode","push","_updateScale","length","data","canvas","Graph","GaphLine","setOnChange","onChange","getGraph","onchange","setRange","j","values","_updateGraph","setValue","self","buttons","button","borderRadius","backgroundColor","cursor","marginTop","width","height","index","onmousedown","event","on","window","delta","movementY","y","stopPropagation","pop","update","Math","ceil","getValue","undefined","x","context","getContext","clearRect","strokeStyle","lineWidth","moveTo","beginPath","lineTo","left","top","stroke","_updateGrid","rect","_updateSize"],"mappings":";;;;;;;AAAAA,QACC,uBACA,8BACA,cACC,SAASC,EAASC,EAAOC,GAC1B,aAegBD,EAAOE,SAEtBC,WAAa,SAAUC,EAAQC,EAAMC,GACpCN,EAAOO,UAAUJ,WAAWK,KAAKC,KAAML,EAAQ,OAI/CK,KAAKC,KAAKC,MAAMC,SAAW,UAQ3BH,KAAKI,YAAc,GAQnBJ,KAAKK,aAAe,GAQpBL,KAAKM,IAAM,EAQXN,KAAKO,IAAM,EAQXP,KAAKQ,KAAOC,SAASC,cAAc,UACnCV,KAAKQ,KAAKN,MAAMS,SAAW,WAC3BX,KAAKQ,KAAKN,MAAMU,WAAaZ,KAAKI,YAAc,KAChDJ,KAAKC,KAAKY,YAAYb,KAAKQ,MAQ3BR,KAAKc,SACLd,KAAKe,SAASnB,EAAMC,GAQpBG,KAAKgB,SACLhB,KAAKiB,YAAY,IAUlBA,YAAc,SAASC,GACtB,IAAI,IAAIC,EAAI,EAAGA,EAAInB,KAAKgB,MAAOG,IAE9BnB,KAAKC,KAAKmB,YAAYpB,KAAKgB,MAAMG,IAGlC,IAAIE,GAAQrB,KAAKM,IAAMN,KAAKO,MAAQW,EAAO,GAE3C,IAAQC,EAAI,EAAGA,EAAID,EAAMC,IACzB,CACC,IAAIH,EAAQP,SAASC,cAAc,OACnCM,EAAMd,MAAMS,SAAW,WACvBK,EAAMd,MAAMoB,cAAgB,OAC5BN,EAAMd,MAAML,MAAQ0B,OAAOC,MAAMC,UAEjC,IAAIC,EAAOjB,SAASkB,eAAe3B,KAAKM,IAAOe,EAAOF,GACtDH,EAAMU,KAAOA,EACbV,EAAMH,YAAYa,GAElB1B,KAAKgB,MAAMY,KAAKZ,GAChBhB,KAAKC,KAAKY,YAAYG,KASxBa,aAAe,WAGd,IAFA,IAAIR,GAAQrB,KAAKM,IAAMN,KAAKO,MAAQP,KAAKgB,MAAMc,OAAS,GAEhDX,EAAI,EAAGA,EAAInB,KAAKgB,MAAMc,OAAQX,IAErCnB,KAAKgB,MAAOhB,KAAKgB,MAAMc,OAAS,EAAKX,GAAGO,KAAKK,KAAO/B,KAAKO,IAAOc,EAAOF,GAWzEJ,SAAW,SAASnB,EAAMC,GACzB,IAAImC,EAASvB,SAASC,cAAc,UACpCsB,EAAO9B,MAAMS,SAAW,WACxBqB,EAAO9B,MAAMU,WAAaZ,KAAKI,YAAc,KAC7CJ,KAAKC,KAAKY,YAAYmB,GAEtBhC,KAAKc,MAAMc,KAAK,IAAIK,MAAMC,SAASF,EAAQpC,EAAMC,KAUlDsC,YAAc,SAASC,EAAUxC,GACpBI,KAAKqC,SAASzC,GACpB0C,SAAWF,GAUlBG,SAAW,SAAShC,EAAKD,GAKxB,IAAI,IAAIa,KAJRnB,KAAKO,IAAMA,EACXP,KAAKM,IAAMA,EAGEN,KAAKc,MAGjB,IAFA,IAAIA,EAAQd,KAAKc,MAAMK,GAEfqB,EAAI,EAAGA,EAAI1B,EAAM2B,OAAOX,OAAQU,IAEpC1B,EAAM2B,OAAOD,GAAKjC,GAEpBO,EAAM2B,OAAOD,GAAKjC,EAEI,OAAnBO,EAAMwB,UAERxB,EAAMwB,SAASxB,EAAM2B,SAGf3B,EAAM2B,OAAOD,GAAKlC,IAEzBQ,EAAM2B,OAAOD,GAAKlC,EAEI,OAAnBQ,EAAMwB,UAERxB,EAAMwB,SAASxB,EAAM2B,SAMzBzC,KAAK6B,eAGL,IAAQV,EAAI,EAAGA,EAAInB,KAAKc,MAAMgB,OAAQX,IACrCnB,KAAK0C,aAAa1C,KAAKc,MAAMK,KAW/BwB,SAAW,SAASF,EAAQ7C,GAC3B,IAAIgD,EAAO5C,KACPc,EAAQd,KAAKqC,SAASzC,GAM1B,IAHAkB,EAAM2B,OAASA,EAGT3B,EAAM+B,QAAQf,OAAShB,EAAM2B,OAAOX,QAAO,CAChD,IAAIgB,EAASrC,SAASC,cAAc,OACpCoC,EAAO5C,MAAM6C,aAAe,MAC5BD,EAAO5C,MAAM8C,gBAAkBlC,EAAMjB,MACrCiD,EAAO5C,MAAM+C,OAAS,UACtBH,EAAO5C,MAAMS,SAAW,WACxBmC,EAAO5C,MAAMgD,UAAY,IAAOlD,KAAKK,aAAe,EAAK,KACzDyC,EAAO5C,MAAMU,WAAcZ,KAAKI,YAAeJ,KAAKK,aAAe,EAAM,KACzEyC,EAAO5C,MAAMiD,MAAQnD,KAAKK,aAAe,KACzCyC,EAAO5C,MAAMkD,OAASpD,KAAKK,aAAe,KAC1CyC,EAAOO,MAAQvC,EAAM+B,QAAQf,OAC7BgB,EAAOhC,MAAQA,EAEfgC,EAAOQ,YAAc,SAASC,GAC7B,IAAIF,EAAQrD,KAAKqD,MACbvC,EAAQd,KAAKc,MAIjBxB,EAAQkE,GAAGC,OAAQ,YAAa,SAASF,GACxC,IAAIG,EAAQH,EAAMI,UAElB7C,EAAM2B,OAAOY,IAAWK,IAAUd,EAAKtC,IAAMsC,EAAKrC,KAAOqC,EAAK1B,KAAK0C,GAEhE9C,EAAM2B,OAAOY,GAAST,EAAKtC,IAC7BQ,EAAM2B,OAAOY,GAAST,EAAKtC,IAEpBQ,EAAM2B,OAAOY,GAAST,EAAKrC,MAClCO,EAAM2B,OAAOY,GAAST,EAAKrC,KAGN,OAAnBO,EAAMwB,UACRxB,EAAMwB,SAASxB,EAAM2B,QAEtBG,EAAKF,aAAa5B,KASnByC,EAAMM,mBAGP7D,KAAKC,KAAKY,YAAYiC,GACtBhC,EAAM+B,QAAQjB,KAAKkB,GAIpB,KAAMhC,EAAM+B,QAAQf,OAAShB,EAAM2B,OAAOX,QACzC9B,KAAKC,KAAKmB,YAAYN,EAAM+B,QAAQiB,OAKrC,IADA,IAAIC,GAAS,EACL5C,EAAI,EAAGA,EAAIsB,EAAOX,OAAQX,IAAK,CACtC,GAAGsB,EAAOtB,GAAKnB,KAAKO,IAAI,CACvBP,KAAKO,IAAMyD,KAAKC,KAAKxB,EAAOtB,IAC5B4C,GAAS,EACT,MAEI,GAAGtB,EAAOtB,GAAKnB,KAAKM,IAAI,CAC5BN,KAAKM,IAAM0D,KAAKC,KAAKxB,EAAOtB,GAAK,GACjC4C,GAAS,EACT,OAKCA,GACF/D,KAAKuC,SAASvC,KAAKO,IAAKP,KAAKM,KAI9BN,KAAK0C,aAAa5B,IASnBoD,SAAW,SAAStE,GACnB,IAAIkB,EAAQd,KAAKqC,SAASzC,GAE1B,OAAa,OAAVkB,EAEKA,EAAM2B,OAGP,MASRJ,SAAW,SAASzC,GACnB,QAAYuE,IAATvE,EACF,IAAI,IAAIuB,EAAI,EAAGA,EAAInB,KAAKc,MAAMgB,OAAQX,IAErC,GAAGnB,KAAKc,MAAMK,GAAGvB,OAASA,EAEzB,OAAOI,KAAKc,MAAMK,GAKrB,OAAGnB,KAAKc,MAAMgB,OAAS,EAEf9B,KAAKc,MAAM,GAGZ,MASR4B,aAAe,SAAS5B,GAEvB,IAAIqC,EAAQnD,KAAKkB,KAAKkD,EAAIpE,KAAKI,YAG3BiE,EAAUvD,EAAMkB,OAAOsC,WAAW,MACtCD,EAAQE,UAAU,EAAG,EAAGpB,EAAOnD,KAAKkB,KAAK0C,GACzCS,EAAQG,YAAc1D,EAAMjB,MAC5BwE,EAAQI,UAAY,IAGpB,IAAIpD,EAAO8B,GAASrC,EAAM2B,OAAOX,OAAS,GACtC4B,EAAQ1D,KAAKM,IAAMN,KAAKO,IAE5B8D,EAAQK,OAAO,EAAG5D,EAAM2B,OAAO,GAAKzC,KAAKkB,KAAK0C,GAC9CS,EAAQM,YAER,IAAI,IAAIxD,EAAI,EAAGA,EAAIL,EAAM2B,OAAOX,OAAQX,IACxC,CACC,IAAIiD,EAAIjD,EAAIE,EACRuC,GAAK,GAAM9C,EAAM2B,OAAOtB,GAAKnB,KAAKO,KAAOmD,GAAU1D,KAAKkB,KAAK0C,EAEjES,EAAQO,OAAOR,EAAGR,GAElB,IAAId,EAAShC,EAAM+B,QAAQ1B,GAC3B2B,EAAO5C,MAAM2E,KAAOT,EAAI,KACxBtB,EAAO5C,MAAM4E,IAAMlB,EAAI,KAGxBS,EAAQU,UAQTC,YAAc,WACb,IAAI7B,EAAQnD,KAAKkB,KAAKkD,EAAIpE,KAAKI,YAE3BiE,EAAUrE,KAAKQ,KAAK8D,WAAW,MACnCD,EAAQE,UAAU,EAAG,EAAGpB,EAAOnD,KAAKkB,KAAK0C,GACzCS,EAAQG,YAAc,UACtBH,EAAQI,UAAY,IAGpBJ,EAAQM,YACRN,EAAQY,KAAK,EAAG,EAAG9B,EAAOnD,KAAKkB,KAAK0C,GACpCS,EAAQU,SACRV,EAAQK,OAAO,EAAG,GAElB,IAAIrD,EAAO8B,EAAQ,GACnB,KAAG9B,GAAQ,GAAX,CAKA,IAAI,IAAIF,EAAI,EAAGA,EAAIgC,EAAOhC,GAAKE,EAC9BgD,EAAQM,YACRN,EAAQK,OAAOvD,EAAG,GAClBkD,EAAQO,OAAOzD,EAAGnB,KAAKkB,KAAK0C,GAC5BS,EAAQU,SAIT,IAAQ5D,EAAI,EAAGA,EAAInB,KAAKkB,KAAK0C,EAAGzC,GAAKE,EACpCgD,EAAQM,YACRN,EAAQK,OAAO,EAAGvD,GAClBkD,EAAQO,OAAOzB,EAAOhC,GACtBkD,EAAQU,WAIVG,YAAc,WACb3F,EAAOO,UAAUoF,YAAYnF,KAAKC,MAElC,IAAImD,EAAQnD,KAAKkB,KAAKkD,EAAIpE,KAAKI,YAG/BJ,KAAKQ,KAAK2C,MAAQA,EAClBnD,KAAKQ,KAAK4C,OAASpD,KAAKkB,KAAK0C,EAC7B5D,KAAKQ,KAAKN,MAAMiD,MAAQA,EAAQ,KAChCnD,KAAKQ,KAAKN,MAAMkD,OAASpD,KAAKkB,KAAK0C,EAAI,KACvC5D,KAAKgF,cAGL,IAAI,IAAI7D,EAAI,EAAGA,EAAInB,KAAKc,MAAMgB,OAAQX,IACtC,CACC,IAAIL,EAAQd,KAAKc,MAAMK,GACvBL,EAAMkB,OAAOmB,MAAQA,EACrBrC,EAAMkB,OAAOoB,OAASpD,KAAKkB,KAAK0C,EAChC9C,EAAMkB,OAAO9B,MAAMiD,MAAQA,EAAQ,KACnCrC,EAAMkB,OAAO9B,MAAMkD,OAASpD,KAAKkB,KAAK0C,EAAI,KAC1C5D,KAAK0C,aAAa5B,GAInB,IAAIO,GAAQrB,KAAKkB,KAAK0C,EAAI,KAAO5D,KAAKgB,MAAMc,OAAS,GACrD,IAAQX,EAAI,EAAGA,EAAInB,KAAKgB,MAAMc,OAAQX,IACrCnB,KAAKgB,MAAMG,GAAGjB,MAAM4E,IAAO3D,EAAIE,EAAQ,QAsB1C,OAjBAY,MAAMC,SAAW,SAASF,EAAQpC,EAAMC,QAEzBsE,IAAXnC,KAEFA,EAASvB,SAASC,cAAc,WACzBR,MAAMS,SAAW,YAGzBX,KAAKgC,OAASA,EACdhC,KAAKJ,UAAiBuE,IAATvE,EAAsBA,EAAO,UAC1CI,KAAKH,WAAmBsE,IAAVtE,EAAuBA,EAAQ,UAC7CG,KAAKyC,UACLzC,KAAK6C,WACL7C,KAAKsC,SAAW,MAIV9C,EAASyC,MAAQA","file":"../Graph.js","sourcesContent":["define([\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./graphics\"\r\n],function(eventer, Widget,graphics){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Graph element is used to draw interactive line graphs.\r\n\t *\r\n\t * It is meant to be used as input in forms to controls values in arrays.\r\n\t *\r\n\t * Multiple graph lines can be displayed, each graph line has a name that can be used to access its properties.\r\n\t * \r\n\t * @class Graph\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t * @param {String} name Name of the default graph.\r\n\t * @param {String} color CSS hex color code of the default graph.\r\n\t */\r\n\tvar NumberBox = Widget.inherit({\r\n\r\n\t\t_construct : function (parent, name, color) {\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Scale margin in pixels.\r\n\t\t\t *\r\n\t\t\t * @property scaleMargin\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.scaleMargin = 22;\r\n\r\n\t\t\t/**\r\n\t\t\t * Value button size.\r\n\t\t\t *\r\n\t\t\t * @property buttonRadius\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.buttonRadius = 10;\r\n\r\n\t\t\t/**\r\n\t\t\t * Maximum value displayed vertically.\r\n\t\t\t *\r\n\t\t\t * @property max\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.max = 1.0;\r\n\r\n\t\t\t/**\r\n\t\t\t * Minimum value displayed vertically.\r\n\t\t\t *\r\n\t\t\t * @property min\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.min = 0.0;\r\n\r\n\t\t\t/**\r\n\t\t\t * Grid canvas element.\r\n\t\t\t *\r\n\t\t\t * @property grid\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.grid = document.createElement(\"canvas\");\r\n\t\t\tthis.grid.style.position = \"absolute\";\r\n\t\t\tthis.grid.style.marginLeft = this.scaleMargin + \"px\";\r\n\t\t\tthis._elm.appendChild(this.grid);\r\n\r\n\t\t\t/**\r\n\t\t\t * The graph lines stored in this graph.\r\n\t\t\t *\r\n\t\t\t * @property graph\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.graph = [];\r\n\t\t\tthis.addGraph(name, color);\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Scale DOM elements.\r\n\t\t\t *\r\n\t\t\t * @property scale\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.scale = [];\r\n\t\t\tthis.createScale(3);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Create numeric scale for this graph.\r\n\t\t *\r\n\t\t * @method createScale\r\n\t\t * @param {Number} size Number of values in the scale.\r\n\t\t */\r\n\t\tcreateScale : function(size) {\r\n\t\t\tfor(var i = 0; i < this.scale; i++)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.removeChild(this.scale[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar step = (this.max - this.min) / (size - 1);\r\n\r\n\t\t\tfor(var i = 0; i < size; i++)\r\n\t\t\t{\r\n\t\t\t\tvar scale = document.createElement(\"div\");\r\n\t\t\t\tscale.style.position = \"absolute\";\r\n\t\t\t\tscale.style.pointerEvents = \"none\";\r\n\t\t\t\tscale.style.color = Editor.theme.textColor;\r\n\r\n\t\t\t\tvar text = document.createTextNode(this.max - (step * i));\r\n\t\t\t\tscale.text = text;\r\n\t\t\t\tscale.appendChild(text);\r\n\r\n\t\t\t\tthis.scale.push(scale);\r\n\t\t\t\tthis._elm.appendChild(scale);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update values of the scale.\r\n\t\t *\r\n\t\t * @method updateScale\r\n\t\t */\r\n\t\t_updateScale : function() {\r\n\t\t\tvar step = (this.max - this.min) / (this.scale.length - 1);\r\n\r\n\t\t\tfor(var i = 0; i < this.scale.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.scale[(this.scale.length - 1) - i].text.data = this.min + (step * i);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new graph line.\r\n\t\t *\r\n\t\t * @method addGraph\r\n\t\t * @param {String} name Name of the graph.\r\n\t\t * @param {Color} color Color of the graph.\r\n\t\t */\r\n\t\taddGraph : function(name, color) {\r\n\t\t\tvar canvas = document.createElement(\"canvas\");\r\n\t\t\tcanvas.style.position = \"absolute\";\r\n\t\t\tcanvas.style.marginLeft = this.scaleMargin + \"px\";\r\n\t\t\tthis._elm.appendChild(canvas);\r\n\r\n\t\t\tthis.graph.push(new Graph.GaphLine(canvas, name, color));\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Attach onchange callback to a graph by its name.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t * @param {String} name Graph name.\r\n\t\t */\r\n\t\tsetOnChange : function(onChange, name) \t{\r\n\t\t\tvar graph = this.getGraph(name);\r\n\t\t\tgraph.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value range of the graph.\r\n\t\t *\r\n\t\t * @method setRange.\r\n\t\t * @param {Number} min\r\n\t\t * @param {Number} max\r\n\t\t */\r\n\t\tsetRange : function(min, max) {\r\n\t\t\tthis.min = min;\r\n\t\t\tthis.max = max;\r\n\r\n\t\t\t//Limit graphs values\r\n\t\t\tfor(var i in this.graph) {\r\n\t\t\t\tvar graph = this.graph[i];\r\n\r\n\t\t\t\tfor(var j = 0; j < graph.values.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(graph.values[j] < min)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgraph.values[j] = min;\r\n\r\n\t\t\t\t\t\tif(graph.onchange !== null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgraph.onchange(graph.values);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(graph.values[j] > max)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgraph.values[j] = max;\r\n\r\n\t\t\t\t\t\tif(graph.onchange !== null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgraph.onchange(graph.values);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateScale();\r\n\r\n\t\t\t//Update grid to fit new scale\r\n\t\t\tfor(var i = 0; i < this.graph.length; i++){\r\n\t\t\t\tthis._updateGraph(this.graph[i]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set values array to a graph using its name.\r\n\t\t *\r\n\t\t * @method setValue\r\n\t\t * @param {Array} values Array of numeric values.\r\n\t\t * @param {String} name Name of the graph line.\r\n\t\t */\r\n\t\tsetValue : function(values, name) {\t\r\n\t\t\tvar self = this;\r\n\t\t\tvar graph = this.getGraph(name);\r\n\r\n\t\t\t//Set values\r\n\t\t\tgraph.values = values;\r\n\r\n\t\t\t//Add buttons if necessary\r\n\t\t\twhile(graph.buttons.length < graph.values.length){\r\n\t\t\t\tvar button = document.createElement(\"div\");\r\n\t\t\t\tbutton.style.borderRadius = \"5px\";\r\n\t\t\t\tbutton.style.backgroundColor = graph.color;\r\n\t\t\t\tbutton.style.cursor = \"pointer\";\r\n\t\t\t\tbutton.style.position = \"absolute\";\r\n\t\t\t\tbutton.style.marginTop = \"-\" + (this.buttonRadius / 2) + \"px\";\r\n\t\t\t\tbutton.style.marginLeft = (this.scaleMargin - (this.buttonRadius / 2)) + \"px\";\r\n\t\t\t\tbutton.style.width = this.buttonRadius + \"px\";\r\n\t\t\t\tbutton.style.height = this.buttonRadius + \"px\";\r\n\t\t\t\tbutton.index = graph.buttons.length;\r\n\t\t\t\tbutton.graph = graph;\r\n\r\n\t\t\t\tbutton.onmousedown = function(event) {\r\n\t\t\t\t\tvar index = this.index;\r\n\t\t\t\t\tvar graph = this.graph;\r\n\t\t\t\t\t//var manager = new EventManager();\r\n\r\n\t\t\t\t\t//manager.add(window, \"mousemove\", function(event)\r\n\t\t\t\t\teventer.on(window, \"mousemove\", function(event) {\r\n\t\t\t\t\t\tvar delta = event.movementY;\r\n\r\n\t\t\t\t\t\tgraph.values[index] -= (delta * ((self.max - self.min) / self.size.y));\r\n\r\n\t\t\t\t\t\tif(graph.values[index] > self.max)\t{\r\n\t\t\t\t\t\t\tgraph.values[index] = self.max;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(graph.values[index] < self.min)\t{\r\n\t\t\t\t\t\t\tgraph.values[index] = self.min;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(graph.onchange !== null)\t{\r\n\t\t\t\t\t\t\tgraph.onchange(graph.values);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tself._updateGraph(graph);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t//manager.add(window, \"mouseup\", function(event)\r\n\t\t\t\t\t//{\t\r\n\t\t\t\t\t//\tmanager.destroy();\r\n\t\t\t\t\t//});\r\n\t\t\t\t\t//manager.create();\r\n\r\n\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis._elm.appendChild(button);\r\n\t\t\t\tgraph.buttons.push(button);\r\n\t\t\t}\r\n\r\n\t\t\t//Remove buttons if necessary\r\n\t\t\twhile(graph.buttons.length > graph.values.length){\r\n\t\t\t\tthis._elm.removeChild(graph.buttons.pop());\r\n\t\t\t}\r\n\r\n\t\t\t//Check if new values are in range\r\n\t\t\tvar update = false;\r\n\t\t\tfor(var i = 0; i < values.length; i++)\t{\r\n\t\t\t\tif(values[i] < this.min){\r\n\t\t\t\t\tthis.min = Math.ceil(values[i]);\r\n\t\t\t\t\tupdate = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse if(values[i] > this.max){\r\n\t\t\t\t\tthis.max = Math.ceil(values[i] + 1.0);\r\n\t\t\t\t\tupdate = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//If some value not in range update range\r\n\t\t\tif(update)\t{\r\n\t\t\t\tthis.setRange(this.min, this.max);\r\n\t\t\t}\r\n\r\n\t\t\t//Update graph\r\n\t\t\tthis._updateGraph(graph);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return value array of a graph by its name.\r\n\t\t *\r\n\t\t * @method getValue\r\n\t\t * @param {String} name Graph name.\r\n\t\t */\r\n\t\tgetValue : function(name) {\r\n\t\t\tvar graph = this.getGraph(name);\r\n\r\n\t\t\tif(graph !== null)\r\n\t\t\t{\r\n\t\t\t\treturn graph.values;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get graph object by name.\r\n\t\t *\r\n\t\t * @method getGraph\r\n\t\t * @param {String} name Graph name.\r\n\t\t */\r\n\t\tgetGraph : function(name) {\r\n\t\t\tif(name !== undefined) \t{\r\n\t\t\t\tfor(var i = 0; i < this.graph.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.graph[i].name === name)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn this.graph[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.graph.length > 0)\r\n\t\t\t{\r\n\t\t\t\treturn this.graph[0];\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update graph canvas and buttons.\r\n\t\t *\r\n\t\t * @method updateGraph\r\n\t\t * @param {Object} graph Graph object.\r\n\t\t */\r\n\t\t_updateGraph : function(graph)\r\n\t\t{\r\n\t\t\tvar width = this.size.x - this.scaleMargin;\r\n\r\n\t\t\t//Get canvas context\r\n\t\t\tvar context = graph.canvas.getContext(\"2d\");\r\n\t\t\tcontext.clearRect(0, 0, width, this.size.y);\r\n\t\t\tcontext.strokeStyle = graph.color;\r\n\t\t\tcontext.lineWidth = \"2\";\r\n\r\n\t\t\t//Draw graph and set button positions\r\n\t\t\tvar step = width / (graph.values.length - 1);\r\n\t\t\tvar delta = this.max - this.min;\r\n\r\n\t\t\tcontext.moveTo(0, graph.values[0] * this.size.y);\r\n\t\t\tcontext.beginPath();\r\n\r\n\t\t\tfor(var i = 0; i < graph.values.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar x = i * step;\r\n\t\t\t\tvar y = (1 - ((graph.values[i] - this.min) / delta)) * this.size.y;\r\n\r\n\t\t\t\tcontext.lineTo(x, y);\r\n\r\n\t\t\t\tvar button = graph.buttons[i];\r\n\t\t\t\tbutton.style.left = x + \"px\";\r\n\t\t\t\tbutton.style.top = y + \"px\";\r\n\t\t\t}\r\n\r\n\t\t\tcontext.stroke();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Draw background grid canvas.\r\n\t\t *\r\n\t\t * @method updateGrid\r\n\t\t */\r\n\t\t_updateGrid : function() {\r\n\t\t\tvar width = this.size.x - this.scaleMargin;\r\n\r\n\t\t\tvar context = this.grid.getContext(\"2d\");\r\n\t\t\tcontext.clearRect(0, 0, width, this.size.y);\r\n\t\t\tcontext.strokeStyle = \"#222222\";\r\n\t\t\tcontext.lineWidth = \"1\";\r\n\r\n\t\t\t//Border\r\n\t\t\tcontext.beginPath();\r\n\t\t\tcontext.rect(0, 0, width, this.size.y);\r\n\t\t\tcontext.stroke();\r\n\t\t\tcontext.moveTo(0, 0);\r\n\r\n\t\t\tvar step = width / 10;\r\n\t\t\tif(step <= 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//Vertical lines\t\r\n\t\t\tfor(var i = 0; i < width; i += step) {\r\n\t\t\t\tcontext.beginPath();\r\n\t\t\t\tcontext.moveTo(i, 0);\r\n\t\t\t\tcontext.lineTo(i, this.size.y);\r\n\t\t\t\tcontext.stroke();\r\n\t\t\t}\r\n\r\n\t\t\t//Horizontal lines\r\n\t\t\tfor(var i = 0; i < this.size.y; i += step)\t{\r\n\t\t\t\tcontext.beginPath();\r\n\t\t\t\tcontext.moveTo(0, i);\r\n\t\t\t\tcontext.lineTo(width, i);\r\n\t\t\t\tcontext.stroke();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_updateSize : function() {\r\n\t\t\tWidget.prototype._updateSize.call(this);\r\n\r\n\t\t\tvar width = this.size.x - this.scaleMargin;\r\n\r\n\t\t\t//Grid\r\n\t\t\tthis.grid.width = width;\r\n\t\t\tthis.grid.height = this.size.y;\r\n\t\t\tthis.grid.style.width = width + \"px\";\r\n\t\t\tthis.grid.style.height = this.size.y + \"px\";\r\n\t\t\tthis._updateGrid();\r\n\r\n\t\t\t//Graph\r\n\t\t\tfor(var i = 0; i < this.graph.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar graph = this.graph[i];\r\n\t\t\t\tgraph.canvas.width = width;\r\n\t\t\t\tgraph.canvas.height = this.size.y;\r\n\t\t\t\tgraph.canvas.style.width = width + \"px\";\r\n\t\t\t\tgraph.canvas.style.height = this.size.y + \"px\";\r\n\t\t\t\tthis._updateGraph(graph);\r\n\t\t\t}\r\n\r\n\t\t\t//Scale\r\n\t\t\tvar step = (this.size.y - 14) / (this.scale.length - 1);\r\n\t\t\tfor(var i = 0; i < this.scale.length; i++) {\r\n\t\t\t\tthis.scale[i].style.top = (i * step) + \"px\";\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tGraph.GaphLine = function(canvas, name, color)\r\n\t{\r\n\t\tif(canvas === undefined)\r\n\t\t{\r\n\t\t\tcanvas = document.createElement(\"canvas\");\r\n\t\t\tcanvas.style.position = \"absolute\";\r\n\t\t}\r\n\r\n\t\tthis.canvas = canvas;\r\n\t\tthis.name = (name !== undefined) ? name : \"default\";\r\n\t\tthis.color = (color !== undefined) ? color : \"#FFFFFF\";\r\n\t\tthis.values = [];\r\n\t\tthis.buttons = [];\r\n\t\tthis.onchange = null;\r\n\t};\r\n\r\n\r\n\treturn graphics.Graph = Graph;\r\n});"]}